{"$message_type":"diagnostic","message":"type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation","code":{"code":"missing_debug_implementations","explanation":null},"level":"warning","spans":[{"file_name":"src/dfa/dense.rs","byte_start":139290,"byte_end":142303,"line_start":3297,"line_end":3348,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct TransitionTable<T> {","highlight_start":1,"highlight_end":32},{"text":"    /// A contiguous region of memory representing the transition table in","highlight_start":1,"highlight_end":75},{"text":"    /// row-major order. The representation is dense. That is, every state","highlight_start":1,"highlight_end":75},{"text":"    /// has precisely the same number of transitions. The maximum number of","highlight_start":1,"highlight_end":76},{"text":"    /// transitions per state is 257 (256 for each possible byte value, plus 1","highlight_start":1,"highlight_end":79},{"text":"    /// for the special EOI transition). If a DFA has been instructed to use","highlight_start":1,"highlight_end":77},{"text":"    /// byte classes (the default), then the number of transitions is usually","highlight_start":1,"highlight_end":78},{"text":"    /// substantially fewer.","highlight_start":1,"highlight_end":29},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// In practice, T is either `Vec<u32>` or `&[u32]`.","highlight_start":1,"highlight_end":57},{"text":"    table: T,","highlight_start":1,"highlight_end":14},{"text":"    /// A set of equivalence classes, where a single equivalence class","highlight_start":1,"highlight_end":71},{"text":"    /// represents a set of bytes that never discriminate between a match","highlight_start":1,"highlight_end":74},{"text":"    /// and a non-match in the DFA. Each equivalence class corresponds to a","highlight_start":1,"highlight_end":76},{"text":"    /// single character in this DFA's alphabet, where the maximum number of","highlight_start":1,"highlight_end":77},{"text":"    /// characters is 257 (each possible value of a byte plus the special","highlight_start":1,"highlight_end":74},{"text":"    /// EOI transition). Consequently, the number of equivalence classes","highlight_start":1,"highlight_end":73},{"text":"    /// corresponds to the number of transitions for each DFA state. Note","highlight_start":1,"highlight_end":74},{"text":"    /// though that the *space* used by each DFA state in the transition table","highlight_start":1,"highlight_end":79},{"text":"    /// may be larger. The total space used by each DFA state is known as the","highlight_start":1,"highlight_end":78},{"text":"    /// stride.","highlight_start":1,"highlight_end":16},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The only time the number of equivalence classes is fewer than 257 is if","highlight_start":1,"highlight_end":80},{"text":"    /// the DFA's kind uses byte classes (which is the default). Equivalence","highlight_start":1,"highlight_end":77},{"text":"    /// classes should generally only be disabled when debugging, so that","highlight_start":1,"highlight_end":74},{"text":"    /// the transitions themselves aren't obscured. Disabling them has no","highlight_start":1,"highlight_end":74},{"text":"    /// other benefit, since the equivalence class map is always used while","highlight_start":1,"highlight_end":76},{"text":"    /// searching. In the vast majority of cases, the number of equivalence","highlight_start":1,"highlight_end":76},{"text":"    /// classes is substantially smaller than 257, particularly when large","highlight_start":1,"highlight_end":75},{"text":"    /// Unicode classes aren't used.","highlight_start":1,"highlight_end":37},{"text":"    classes: ByteClasses,","highlight_start":1,"highlight_end":26},{"text":"    /// The stride of each DFA state, expressed as a power-of-two exponent.","highlight_start":1,"highlight_end":76},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The stride of a DFA corresponds to the total amount of space used by","highlight_start":1,"highlight_end":77},{"text":"    /// each DFA state in the transition table. This may be bigger than the","highlight_start":1,"highlight_end":76},{"text":"    /// size of a DFA's alphabet, since the stride is always the smallest","highlight_start":1,"highlight_end":74},{"text":"    /// power of two greater than or equal to the alphabet size.","highlight_start":1,"highlight_end":65},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// While this wastes space, this avoids the need for integer division","highlight_start":1,"highlight_end":75},{"text":"    /// to convert between premultiplied state IDs and their corresponding","highlight_start":1,"highlight_end":75},{"text":"    /// indices. Instead, we can use simple bit-shifts.","highlight_start":1,"highlight_end":56},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// See the docs for the `stride2` method for more details.","highlight_start":1,"highlight_end":64},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The minimum `stride2` value is `1` (corresponding to a stride of `2`)","highlight_start":1,"highlight_end":78},{"text":"    /// while the maximum `stride2` value is `9` (corresponding to a stride of","highlight_start":1,"highlight_end":79},{"text":"    /// `512`). The maximum is not `8` since the maximum alphabet size is `257`","highlight_start":1,"highlight_end":80},{"text":"    /// when accounting for the special EOI transition. However, an alphabet","highlight_start":1,"highlight_end":77},{"text":"    /// length of that size is exceptionally rare since the alphabet is shrunk","highlight_start":1,"highlight_end":79},{"text":"    /// into equivalence classes.","highlight_start":1,"highlight_end":34},{"text":"    stride2: usize,","highlight_start":1,"highlight_end":20},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lint level is defined here","code":null,"level":"note","spans":[{"file_name":"src/lib.rs","byte_start":29081,"byte_end":29110,"line_start":601,"line_end":601,"column_start":9,"column_end":38,"is_primary":true,"text":[{"text":"#![warn(missing_debug_implementations)]","highlight_start":9,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dfa/dense.rs:3297:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct TransitionTable<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3298\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// A contiguous region of memory representing the transition table in\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// row-major order. The representation is dense. That is, every state\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// has precisely the same number of transitions. The maximum number of\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    stride2: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the lint level is defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:601:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![warn(missing_debug_implementations)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation","code":{"code":"missing_debug_implementations","explanation":null},"level":"warning","spans":[{"file_name":"src/dfa/dense.rs","byte_start":164719,"byte_end":166752,"line_start":3863,"line_end":3900,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct StartTable<T> {","highlight_start":1,"highlight_end":27},{"text":"    /// The initial start state IDs.","highlight_start":1,"highlight_end":37},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// In practice, T is either `Vec<u32>` or `&[u32]`.","highlight_start":1,"highlight_end":57},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// The first `2 * stride` (currently always 8) entries always correspond","highlight_start":1,"highlight_end":78},{"text":"    /// to the starts states for the entire DFA, with the first 4 entries being","highlight_start":1,"highlight_end":80},{"text":"    /// for unanchored searches and the second 4 entries being for anchored","highlight_start":1,"highlight_end":76},{"text":"    /// searches. To keep things simple, we always use 8 entries even if the","highlight_start":1,"highlight_end":77},{"text":"    /// `StartKind` is not both.","highlight_start":1,"highlight_end":33},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// After that, there are `stride * patterns` state IDs, where `patterns`","highlight_start":1,"highlight_end":78},{"text":"    /// may be zero in the case of a DFA with no patterns or in the case where","highlight_start":1,"highlight_end":79},{"text":"    /// the DFA was built without enabling starting states for each pattern.","highlight_start":1,"highlight_end":77},{"text":"    table: T,","highlight_start":1,"highlight_end":14},{"text":"    /// The starting state configuration supported. When 'both', both","highlight_start":1,"highlight_end":70},{"text":"    /// unanchored and anchored searches work. When 'unanchored', anchored","highlight_start":1,"highlight_end":75},{"text":"    /// searches panic. When 'anchored', unanchored searches panic.","highlight_start":1,"highlight_end":68},{"text":"    kind: StartKind,","highlight_start":1,"highlight_end":21},{"text":"    /// The start state configuration for every possible byte.","highlight_start":1,"highlight_end":63},{"text":"    start_map: StartByteMap,","highlight_start":1,"highlight_end":29},{"text":"    /// The number of starting state IDs per pattern.","highlight_start":1,"highlight_end":54},{"text":"    stride: usize,","highlight_start":1,"highlight_end":19},{"text":"    /// The total number of patterns for which starting states are encoded.","highlight_start":1,"highlight_end":76},{"text":"    /// This is `None` for DFAs that were built without start states for each","highlight_start":1,"highlight_end":78},{"text":"    /// pattern. Thus, one cannot use this field to say how many patterns","highlight_start":1,"highlight_end":74},{"text":"    /// are in the DFA in all cases. It is specific to how many patterns are","highlight_start":1,"highlight_end":77},{"text":"    /// represented in this start table.","highlight_start":1,"highlight_end":41},{"text":"    pattern_len: Option<usize>,","highlight_start":1,"highlight_end":32},{"text":"    /// The universal starting state for unanchored searches. This is only","highlight_start":1,"highlight_end":75},{"text":"    /// present when the DFA supports unanchored searches and when all starting","highlight_start":1,"highlight_end":80},{"text":"    /// state IDs for an unanchored search are equivalent.","highlight_start":1,"highlight_end":59},{"text":"    universal_start_unanchored: Option<StateID>,","highlight_start":1,"highlight_end":49},{"text":"    /// The universal starting state for anchored searches. This is only","highlight_start":1,"highlight_end":73},{"text":"    /// present when the DFA supports anchored searches and when all starting","highlight_start":1,"highlight_end":78},{"text":"    /// state IDs for an anchored search are equivalent.","highlight_start":1,"highlight_end":57},{"text":"    universal_start_anchored: Option<StateID>,","highlight_start":1,"highlight_end":47},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dfa/dense.rs:3863:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct StartTable<T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3864\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// The initial start state IDs.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3865\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3866\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// In practice, T is either `Vec<u32>` or `&[u32]`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3899\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    universal_start_anchored: Option<StateID>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3900\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation","code":{"code":"missing_debug_implementations","explanation":null},"level":"warning","spans":[{"file_name":"src/dfa/dense.rs","byte_start":182256,"byte_end":182334,"line_start":4305,"line_end":4308,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct StartStateIter<'a> {","highlight_start":1,"highlight_end":32},{"text":"    st: StartTable<&'a [u32]>,","highlight_start":1,"highlight_end":31},{"text":"    i: usize,","highlight_start":1,"highlight_end":14},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dfa/dense.rs:4305:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct StartStateIter<'a> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4306\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    st: StartTable<&'a [u32]>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation","code":{"code":"missing_debug_implementations","explanation":null},"level":"warning","spans":[{"file_name":"src/dfa/dense.rs","byte_start":200793,"byte_end":200909,"line_start":4770,"line_end":4773,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct StateIter<'a, T> {","highlight_start":1,"highlight_end":30},{"text":"    tt: &'a TransitionTable<T>,","highlight_start":1,"highlight_end":32},{"text":"    it: iter::Enumerate<slice::Chunks<'a, StateID>>,","highlight_start":1,"highlight_end":53},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type does not implement `Debug`; consider adding `#[derive(Debug)]` or a manual implementation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dfa/dense.rs:4770:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4770\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct StateIter<'a, T> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4771\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    tt: &'a TransitionTable<T>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4772\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    it: iter::Enumerate<slice::Chunks<'a, StateID>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4773\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
